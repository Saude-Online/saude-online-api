// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
}

model User {
  id          String      @id @default(uuid())
  username    String      @unique
  name        String
  crm         String?     @unique
  password    String
  role        ROLE        @default(USER)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  patient     Patient?    @relation
  specialties Specialty[] @relation("UserSpecialties")
  Schedule    Schedule[]

  @@map(name: "users")
}

model Patient {
  id           String         @id @default(uuid())
  name         String
  age          Int?
  document     String         @unique
  phone        String?
  userId       String?        @unique
  user         User?          @relation(fields: [userId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  schedules    Schedule[]     @relation(onDelete: Cascade)
  examSchedule ExamSchedule[] @relation(onDelete: Cascade)
  anamneses    Anamnesis[]    @relation(onDelete: Cascade)

  @@map(name: "patients")
}

model Schedule {
  id           String   @id @default(uuid())
  patientId    String
  patient      Patient  @relation(fields: [patientId], references: [id])
  specialistId String
  specialist   User     @relation(fields: [specialistId], references: [id])
  dateHour     DateTime
  value        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([patientId], name: "patientId")
  @@index([dateHour], name: "dateHour")
  @@index([patientId, dateHour], name: "patientId_date")
  @@map(name: "schedules")
}

model ExamSchedule {
  id        String   @id @default(uuid())
  patientId String
  patient   Patient  @relation(fields: [patientId], references: [id])
  examId    String
  exam      Exam     @relation(fields: [examId], references: [id])
  dateHour  DateTime
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patientId], name: "examPatientId")
  @@index([dateHour], name: "examDateHour")
  @@index([patientId, dateHour], name: "examPatientId_date")
  @@map(name: "exam_schedules")
}

model Specialty {
  id    String @id @default(uuid())
  name  String
  value Int
  users User[] @relation("UserSpecialties")

  @@map(name: "specialties")
}

model Exam {
  id           String         @id @default(uuid())
  name         String         @unique
  value        Int
  examSchedule ExamSchedule[]

  @@map(name: "exams")
}

model Anamnesis {
  id             String   @id @default(uuid())
  patientId      String
  patient        Patient  @relation(fields: [patientId], references: [id])
  age            Int
  weight         String
  height         String
  symptoms       String
  medicalHistory String?
  allergies      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map(name: "anamneses")
}
